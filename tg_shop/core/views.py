from django.db import IntegrityError
from drf_yasg.utils import swagger_auto_schema
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from drf_yasg import openapi
from .permissions import IsOwnerOrManager, IsAuthenticatedOrAPISecret
from .serializers import RegisterUserSerializer, MarketplaceTokenSerializer, ProductSerializer, \
    QuestionAnswerSerializer, ProductQuestionSerializer, ProductQuestionMessageSerializer, \
    QuestionWithMessagesSerializer

from rest_framework import generics, permissions
from .serializers import ManagerInviteSerializer
from .models import Store, CustomUser, ManagerInviteToken, MarketplaceIntegrationToken, ProductImage, Product, \
    QuestionAnswer, ProductQuestion, ProductQuestionMessage, Marketplace
from rest_framework.response import Response
from rest_framework.exceptions import PermissionDenied, NotFound

from .utils.utils import get_store_for_user


class RegisterUserView(APIView):
    @swagger_auto_schema(
        operation_description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞",
        request_body=RegisterUserSerializer,
        responses={201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), 400: "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"}
    )
    def post(self, request):
        serializer = RegisterUserSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response({'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', 'user_id': user.id}, status=201)
        return Response(serializer.errors, status=400)


class InviteManagerView(generics.CreateAPIView):
    serializer_class = ManagerInviteSerializer
    permission_classes = [permissions.IsAuthenticated]

    def dispatch(self, request, *args, **kwargs):
        self.store_id = kwargs.get('store_id')
        return super().dispatch(request, *args, **kwargs)

    def get_store(self):
        try:
            store = Store.objects.get(id=self.store_id)
        except Store.DoesNotExist:
            raise NotFound('–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
        if store.owner != self.request.user:
            raise PermissionDenied('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞')
        return store

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['store'] = self.get_store()
        return context


from rest_framework import viewsets, permissions
from .serializers import ManagerSerializer
from .models import CustomUser, Store
from rest_framework.exceptions import PermissionDenied


class ManagerViewSet(viewsets.ModelViewSet):
    serializer_class = ManagerSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if self.request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return CustomUser.objects.filter(role='manager', store__owner=self.request.user)

    def perform_create(self, serializer):
        if self.request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        store = Store.objects.filter(owner=self.request.user).first()
        serializer.save(role='manager', store=store)

    def perform_update(self, serializer):
        if self.request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        serializer.save()

    def perform_destroy(self, instance):
        if self.request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        instance.delete()


from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied
from .models import Store, ManagerInviteToken


class GenerateInviteLinkView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        operation_description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        manual_parameters=[
            openapi.Parameter('store_id', openapi.IN_PATH, description="ID –º–∞–≥–∞–∑–∏–Ω–∞", type=openapi.TYPE_INTEGER)
        ],
        responses={200: openapi.Response(description="–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")}
    )
    def post(self, request, store_id):
        try:
            store = Store.objects.get(id=store_id)
        except Store.DoesNotExist:
            return Response({"error": "Store not found"}, status=404)

        if store.owner != request.user:
            raise PermissionDenied("–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞")

        token = ManagerInviteToken.objects.create(store=store)
        link = f"http://localhost:8000/api/invite/{token.token}/"
        return Response({"invite_link": link})


from .serializers import InviteByTokenSerializer


class RegisterViaTokenView(APIView):
    def get_permissions(self):
        if self.request.method == 'GET':
            return [AllowAny()]
        return [IsAuthenticated()]

    @swagger_auto_schema(
        operation_description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-—Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        responses={200: openapi.Response(description="–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"), 400: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"}
    )
    def get(self, request, token):
        try:
            invite_token = ManagerInviteToken.objects.select_related('store').get(token=token, is_used=False)
        except ManagerInviteToken.DoesNotExist:
            return Response({"error": "Invalid or used token"}, status=status.HTTP_400_BAD_REQUEST)

        is_expired = invite_token.is_expired()

        return Response({
            "store_id": invite_token.store.id,
            "store_name": invite_token.store.name,
            "token_valid": not is_expired,
            "is_expired": is_expired,
            "token": str(invite_token.token)
        }, status=status.HTTP_200_OK if not is_expired else status.HTTP_400_BAD_REQUEST)

    @swagger_auto_schema(
        operation_description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–Ω–≤–∞–π—Ç-—Ç–æ–∫–µ–Ω—É",
        request_body=InviteByTokenSerializer,
        responses={201: openapi.Response(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"), 400: "–û—à–∏–±–∫–∞"}
    )
    def post(self, request, token):
        try:
            invite_token = ManagerInviteToken.objects.get(token=token)
        except ManagerInviteToken.DoesNotExist:
            return Response({"error": "Invalid token"}, status=404)

        # üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not request.user.is_authenticated:
            raise PermissionDenied("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        if not hasattr(request.user, "role") or request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω")

        if invite_token.store.owner != request.user:
            raise PermissionDenied("–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º")

        if invite_token.is_used:
            return Response({"error": "Token already used"}, status=400)

        if invite_token.is_expired():
            return Response({"error": "Token expired"}, status=410)

        serializer = InviteByTokenSerializer(data=request.data, context={'invite_token': invite_token})
        if serializer.is_valid():
            user = serializer.save()
            invite_token.is_used = True
            invite_token.save(update_fields=['is_used'])
            return Response({"message": "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "user_id": user.id}, status=201)

        return Response(serializer.errors, status=400)


class ConfirmInviteView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        operation_description="–ü–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ",
        responses={200: openapi.Response(description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")}
    )
    def get(self, request, token):
        try:
            invite_token = ManagerInviteToken.objects.get(token=token)
        except ManagerInviteToken.DoesNotExist:
            raise NotFound("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if invite_token.is_used:
            return Response({"error": "–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"}, status=400)

        if invite_token.is_expired():
            return Response({"error": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫"}, status=410)

        if request.user.role != 'owner':
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

        if invite_token.store.owner != request.user:
            raise PermissionDenied("–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É")

        return Response({
            "store": invite_token.store.name,
            "token": str(invite_token.token),
            "can_register": True
        }, status=200)


from rest_framework import serializers


class MarketplaceTokenViewSet(viewsets.ModelViewSet):
    serializer_class = MarketplaceTokenSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = 'service_name'

    def get_queryset(self):
        store_id = self.kwargs['store_id']
        store = Store.objects.get(pk=store_id)
        if store.owner != self.request.user:
            raise PermissionDenied('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞')
        return MarketplaceIntegrationToken.objects.filter(store=store)

    def perform_create(self, serializer):
        store_id = self.kwargs['store_id']
        store = Store.objects.get(pk=store_id)
        if store.owner != self.request.user:
            raise PermissionDenied('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞')
        try:
            serializer.save(store=store)
        except IntegrityError:
            raise serializers.ValidationError({
                "service_name": f"–¢–æ–∫–µ–Ω –¥–ª—è {serializer.validated_data.get('service_name')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
            })


class ProductViewSet(viewsets.ModelViewSet):
    serializer_class = ProductSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrManager]
    parser_classes = [MultiPartParser, FormParser]

    def get_store(self):
        user = self.request.user

        if not user.is_authenticated:
            raise PermissionDenied("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        if hasattr(user, 'role'):
            if user.role == 'owner':
                return Store.objects.filter(owner=user).first()
            elif user.role == 'manager':
                return user.store

        raise PermissionDenied("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –º–∞–≥–∞–∑–∏–Ω—É.")

        if user.role == 'owner':
            store = Store.objects.filter(owner=user).first()
        elif user.role == 'manager':
            store = user.store
        else:
            store = None

        if not store:
            raise PermissionDenied("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –º–∞–≥–∞–∑–∏–Ω—É.")
        return store

    def get_queryset(self):
        return Product.objects.filter(store=self.get_store())

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['store'] = self.get_store()
        return context


from rest_framework.decorators import action


class QuestionAnswerViewSet(viewsets.ModelViewSet):
    queryset = QuestionAnswer.objects.all()
    serializer_class = QuestionAnswerSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.role in ['owner', 'manager']:
            return QuestionAnswer.objects.filter(responder=user)
        return QuestionAnswer.objects.none()

    @swagger_auto_schema(
        method='get',
        operation_description="–û—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        responses={200: openapi.Response(description="–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤"), 404: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    )
    @action(detail=False, methods=['get'], url_path='by-user/(?P<user_id>[^/.]+)')
    def answers_by_user(self, request, user_id=None):
        try:
            user = CustomUser.objects.get(id=user_id)
        except CustomUser.DoesNotExist:
            return Response({"error": "User not found"}, status=404)

        questions = ProductQuestion.objects.filter(user=user).values_list('id', flat=True)
        answers = QuestionAnswer.objects.filter(question_id__in=questions)
        serializer = self.get_serializer(answers, many=True)
        return Response(serializer.data)

class ProductQuestionViewSet(viewsets.ModelViewSet):
    serializer_class = ProductQuestionSerializer
    queryset = ProductQuestion.objects.all()
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.role == 'user':
            return ProductQuestion.objects.filter(user=user)
        elif user.role in ['manager', 'owner']:
            return ProductQuestion.objects.all()
        return ProductQuestion.objects.none()



class ProductQuestionMessageViewSet(viewsets.ModelViewSet):
    serializer_class = ProductQuestionMessageSerializer
    queryset = ProductQuestionMessage.objects.all()
    permission_classes = [IsAuthenticatedOrAPISecret]  # ‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω permission

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated and user.role in ['manager', 'owner']:
            return ProductQuestionMessage.objects.all()
        return ProductQuestionMessage.objects.none()


class ExternalQuestionCreateView(APIView):
    permission_classes = [IsAuthenticatedOrAPISecret]  # –ø—É–±–ª–∏—á–Ω–æ, –Ω–æ –ø–æ –∫–ª—é—á—É

    @swagger_auto_schema(
        operation_description="–ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API-–∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, X-API-KEY)",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['external_id', 'product', 'text'],
            properties={
                'external_id': openapi.Schema(type=openapi.TYPE_STRING),
                'product': openapi.Schema(type=openapi.TYPE_INTEGER),
                'text': openapi.Schema(type=openapi.TYPE_STRING),
                'marketplace': openapi.Schema(type=openapi.TYPE_STRING, enum=['ozon', 'wildberries', 'yandex_market']),
            },
        ),
        responses={201: openapi.Response(description="–í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω"), 400: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"},
    )
    def post(self, request):

        external_id = request.data.get('external_id')
        product_id = request.data.get('product')
        text = request.data.get('text')
        marketplace_name = request.data.get('marketplace')

        if not all([external_id, product_id, text]):
            return Response({'error': 'Missing required fields'}, status=400)

        user, _ = CustomUser.objects.get_or_create(
            external_id=external_id,
            defaults={
                'username': f"user_{external_id[:12]}",
                'role': 'user'
            }
        )

        try:
            product = Product.objects.get(id=product_id)
        except Product.DoesNotExist:
            return Response({'error': 'Product not found'}, status=404)

        marketplace = Marketplace.objects.filter(name=marketplace_name).first()

        question = ProductQuestion.objects.create(
            product=product,
            user=user,
            text=text,
            marketplace=marketplace
        )

        return Response({'message': 'Question submitted', 'question_id': question.id}, status=201)


class UserConversationView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        operation_description="–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ external_id",
        manual_parameters=[
            openapi.Parameter('external_id', openapi.IN_QUERY, description="ID –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                              type=openapi.TYPE_STRING)
        ],
        responses={200: openapi.Response(description="–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")}
    )
    def get(self, request):
        external_id = request.query_params.get("external_id")
        if not external_id:
            return Response({"error": "external_id is required"}, status=400)

        try:
            user = CustomUser.objects.get(external_id=external_id)
        except CustomUser.DoesNotExist:
            return Response({"error": "user not found"}, status=404)

        questions = ProductQuestion.objects.filter(user=user).order_by("-created_at")
        data = QuestionWithMessagesSerializer(questions, many=True).data
        return Response(data)

class ShopUserListView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        operation_description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–¥–∞–≤–∞–≤—à–∏—Ö –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞",
        responses={200: openapi.Response(description="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")}
    )
    def get(self, request):
        store = get_store_for_user(request.user)
        if not store:
            return Response({"error": "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}, status=403)

        # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
        products = Product.objects.filter(shop=store)
        if not products.exists():
            return Response({"users": []})

        # –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        questions = ProductQuestion.objects.filter(product__in=products).select_related("user").prefetch_related("messages")

        result = {}

        for question in questions:
            user = question.user
            if user is None:
                continue

            uid = user.external_id or f"user_{user.id}"
            sent_at_list = list(question.messages.values_list("sent_at", flat=True))
            if not sent_at_list:
                continue

            first = min(sent_at_list)
            last = max(sent_at_list)

            if uid not in result:
                result[uid] = {
                    "external_id": uid,
                    "first_message": first,
                    "last_message": last,
                }
            else:
                result[uid]["first_message"] = min(result[uid]["first_message"], first)
                result[uid]["last_message"] = max(result[uid]["last_message"], last)

        sorted_users = sorted(result.values(), key=lambda x: x["first_message"])
        return Response(sorted_users)

